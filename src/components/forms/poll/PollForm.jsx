import { Box, Button, Divider, Typography } from "@mui/material";
import { useRespondToPoll } from "api/useRespondToPoll";
import { Prompt } from "components/modular/Prompt";
import { PollPromptType } from "constants/PollPromptType";
import React from "react";

export const PollForm = ({ data, pollId }) => {
  const [respond] = useRespondToPoll();
  const { name, description, redirectURL, author, prompts } = data;
  const [responses, setResponses] = React.useState([]);

  const getDefaultResponseArray = React.useCallback(() => {
    let _responses = [];
    for (let i = 0; i < prompts.length; i += 1) {
      switch (prompts[i].type) {
        case PollPromptType.Grade.name:
          _responses = [..._responses, "5"];
          break;
        default:
          _responses = [..._responses, ""];
          break;
      }
    }
    return _responses;
  }, [prompts]);

  React.useEffect(() => {
    setResponses(getDefaultResponseArray());
  }, [getDefaultResponseArray, prompts]);

  const setResponseAt = (index, value) => {
    let _responses = [...responses];
    _responses[index] = value;
    setResponses(_responses);
  };

  const onSubmit = () => {
    respond({
      pollId: pollId,
      values: [...responses],
    }).finally(() => {
      setResponses(getDefaultResponseArray());
      alert("Thank you for answering the poll");
      window.location.replace(redirectURL);
    });
  };

  return (
    <form>
      <Box mt={4}>
        <Typography variant="h4">{name}</Typography>
      </Box>
      <Box my={1.5}>
        <Divider />
      </Box>
      <Typography gutterBottom color="GrayText" variant="h6">
        <i>
          {
            "This poll was automatically generated by the SurveyOnTheWay platform"
          }
        </i>
      </Typography>
      <Typography gutterBottom variant="h6">
        <b>{"Author: "}</b>
        {author}
      </Typography>
      <Typography variant="h6">
        <b>{"Description: "}</b>
        {description}
      </Typography>
      <Box mt={3}>
        {responses.length === prompts.length &&
          prompts.map((prompt, index) => (
            <Prompt
              key={index}
              prompt={prompt}
              index={index}
              setValue={(value) => setResponseAt(index, value)}
              value={responses[index]}
            />
          ))}
      </Box>
      <Box display="flex" mb={6} justifyContent="flex-end">
        <Button
          variant="contained"
          disabled={
            !!responses.length &&
            !responses.reduce((prev, curr) => prev && !!curr?.length)
          }
          onClick={onSubmit}
        >
          {"Submit Response"}
        </Button>
      </Box>
    </form>
  );
};
